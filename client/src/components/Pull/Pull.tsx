import React, { useEffect, useState } from 'react';
import { StyledPullContainer, StyledSlotsWrap } from './Pull.styles';

interface IPull {
  boxHeight: number;
  isPulling: boolean;
}

const range = 40;
const rangeHalf = range / 2;
const defaultTopHeight = 0;
const minBoxSize = 100;
const datas: {
  emoji: string;
  text: string;
}[] = [
  {
    emoji: 'üçï',
    text: 'ÌîºÏûê',
  },
  {
    emoji: 'üå≠',
    text: 'Ìï´ÎèÑ',
  },
  {
    emoji: 'üåÆ',
    text: 'ÌÉÄÏΩî',
  },
  {
    emoji: 'ü•ö',
    text: 'Îã¨Í±Ä',
  },
  {
    emoji: 'üßà',
    text: 'Î≤ÑÌÑ∞',
  },
  {
    emoji: 'üçú',
    text: 'ÎùºÎ©¥',
  },
  {
    emoji: 'üçõ',
    text: 'Ïπ¥Î†à',
  },
  {
    emoji: 'üßÅ',
    text: 'ÏªµÏºÄÏù¥',
  },
];
const Pull = ({ boxHeight, isPulling }: IPull) => {
  const [topHeight, setTopHeight] = useState(defaultTopHeight);
  const [isFinishPull, setIsFinishPull] = useState(false);
  const [dataIdx, setDataIdx] = useState(0);

  const isPullingFinished = boxHeight === minBoxSize && !isPulling;

  useEffect(() => {
    if (isPullingFinished) {
      const slotAnimation = () => {
        const maxTime = 1000;
        let time = 0;
        const changeTopHeight = () => {
          setTimeout(() => {
            if (time >= maxTime) {
              setDataIdx(-1);
              setTopHeight(0);
              return;
            }
            setTopHeight(((maxTime - time) % range) - rangeHalf);
            setDataIdx(
              Math.round(Math.abs((maxTime - time + rangeHalf) / range)) %
                datas.length
            );
            time += 30;
            changeTopHeight();
          }, 30);
        };
        changeTopHeight();
      };
      slotAnimation();
    } else {
      setTopHeight((boxHeight % range) - rangeHalf);
      setDataIdx(
        Math.round(Math.abs((boxHeight + rangeHalf) / range)) % datas.length
      );
    }
  }, [boxHeight]);

  const slotsOpacity = 1 - Math.abs(topHeight / rangeHalf);

  return (
    <StyledPullContainer style={{ top: `${50 + boxHeight}px` }}>
      <StyledSlotsWrap style={{ top: `${topHeight}px`, opacity: slotsOpacity }}>
        {dataIdx === -1 ? 'Ìï´ÎèÑÍ∑∏Í∞Ä' : datas[dataIdx].emoji}
      </StyledSlotsWrap>
      <div>Îï°Í≤®Ïöî</div>
    </StyledPullContainer>
  );
};

export default Pull;
